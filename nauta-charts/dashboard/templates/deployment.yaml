apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}
  labels:
    app: {{ .Release.Name }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    kubernetes.io/cluster-service: "true"
    nauta_release: {{ required "NAUTA Release name is required" .Values.global.nauta }}
    nauta_release_version: {{ required "NAUTA Release version is required" .Values.global.nauta_release }}
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
        app: {{ .Release.Name }}
        chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
    spec:
      tolerations:
      - key: "master"
        operator: "Exists"
        effect: "NoSchedule"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: master
                operator: In
                values:
                - "True"
      serviceAccountName: {{ .Release.Name }}-{{ .Chart.Name }}
      containers:
      - name: dashboard
        image: {{ required "NAUTA Registry is required" .Values.global.nauta_registry }}/{{ required "NAUTA dashboard image is required" .Values.image }}
        imagePullPolicy: IfNotPresent
        args:
          - --enable-insecure-login
        ports:
        - name: http
          containerPort: 9090
          protocol: TCP
        volumeMounts:
        - name: kubernetes-dashboard-certs
          mountPath: /certs
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /
            port: 9090
          initialDelaySeconds: 10
          timeoutSeconds: 30
        livenessProbe:
          httpGet:
            scheme: HTTP
            path: /
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
          limits:
            cpu: 500m
          requests:
            cpu: 100m
      volumes:
      - name: kubernetes-dashboard-certs
        secret:
          secretName: {{ .Release.Name }}-{{ .Chart.Name }}
      - name: tmp-volume
        emptyDir: {}
