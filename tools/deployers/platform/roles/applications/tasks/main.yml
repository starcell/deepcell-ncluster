---

- name: "{{ message_label }} Create a k8s nauta namespace"
  changed_when: False
  environment:
    KUBECONFIG: /etc/nauta-cluster/master/kubernetes/kubeconfigs/admin.kubeconfig
  shell: "kubectl get namespace nauta || kubectl create namespace nauta"

- name: "{{ message_label }} Create kubernetes configuration directory"
  file:
    path: /root/kubernetes/apps
    state: directory

- name: "{{ message_label }} Render tiller apps"
  template:
    src: tiller.yml.j2
    dest: /root/kubernetes/apps/tiller.yml

- name: "{{ message_label }} Apply tiller release"
  changed_when: False
  environment:
    KUBECONFIG: /etc/nauta-cluster/master/kubernetes/kubeconfigs/admin.kubeconfig
  shell: kubectl apply -f /root/kubernetes/apps/tiller.yml

- name: "{{ message_label }} Wait for at least one tiller instances to get ready"
  environment:
    KUBECONFIG: /etc/nauta-cluster/master/kubernetes/kubeconfigs/admin.kubeconfig
  shell: "kubectl --namespace=kube-system get ds tiller -o jsonpath='{.status.numberReady}'"
  changed_when: False
  register: tiller_ready
  until: tiller_ready.stdout | int >= 1
  retries: 60
  delay: 1

- name: "{{ message_label }} Fail if all tiller isntances are down"
  fail:
    msg: Tiller did not get up
  when: tiller_ready.stdout == '0'

- name: "{{ message_label }} Verify helm access"
  environment:
    KUBECONFIG: /etc/nauta-cluster/master/kubernetes/kubeconfigs/admin.kubeconfig
  shell: helm ls
  changed_when: False
  register: helm_access
  until: helm_access is success
  retries: 10
  delay: 10

- name: "{{ message_label }} Copy chart"
  copy:
    src: "nauta-platform-{{ nauta_release_package_version }}-{{ nauta_release_package_version_suffix }}-{{ nauta_release_package_release }}.tgz"
    dest: "/tmp/nauta-platform-{{ nauta_release_package_version }}-{{ nauta_release_package_version_suffix }}-{{ nauta_release_package_release }}.tgz"

- name: "{{ message_label }} Fetch all interfaces names"
  set_fact:
    all_cluster_interfaces: "{{ (all_cluster_interfaces | default([])) + [hostvars[item].internal_interface] }}"
  with_items: "{{ groups['all'] }}"

- name: "{{ message_label }} Render values"
  vars:
    nauta_release_values:
      global:
        MasterHost: "{{ hostvars[groups['master'][0]].ansible_nodename }}"
        nauta_registry: "registry.service.{{ nodes_domain }}.{{ domain }}:5000"
      flannel:
        interfaces: "{{ all_cluster_interfaces | sort | unique }}"
        pod_network: "{{ kubernetes_network.pod }}"
      samba-forward:
        ClusterIP: "{{ kubernetes_network.svc_list.samba.ip }}"
      nfs:
        ip: "{{ hostvars[groups['master'][0]].nauta_configuration.internal_interface.ipv4_address }}"
        input: "{{ local_data_path }}/local/nfs/input"
        output: "{{ local_data_path }}/local/nfs/output"
      skydns:
        ClusterIP: "{{ kubernetes_network.svc_list.dns.ip }}"
        Domain: "{{ k8s_domain }}.{{ domain }}"
      ingress:
        ClusterIP: "{{ kubernetes_network.svc_list.ingress.ip }}"
      features: "{{ features | default({}) }}"
  copy:
    content: "{{ nauta_release_values | to_nice_yaml(width=50, explicit_start=True, explicit_end=True) }}"
    dest: "/tmp/nauta-platform-{{ nauta_release_package_version }}-{{ nauta_release_package_version_suffix }}-{{ nauta_release_package_release }}.values.yaml"


- name: "{{ message_label }} Mark node taint"
  changed_when: False
  environment:
    KUBECONFIG: /etc/nauta-cluster/master/kubernetes/kubeconfigs/admin.kubeconfig
  shell: "kubectl taint nodes {{ hostvars[groups['master'][0]].ansible_nodename }} master=true:NoSchedule --overwrite=True"
  when: "'worker' in groups and groups['worker'] | length > 0"

- name: "{{ message_label }} Install helm chart"
  environment:
    KUBECONFIG: /etc/nauta-cluster/master/kubernetes/kubeconfigs/admin.kubeconfig
  shell: >
    helm upgrade nauta-k8s-platform
    --namespace kube-system -i
    /tmp/nauta-platform-{{ nauta_release_package_version }}-{{ nauta_release_package_version_suffix }}-{{ nauta_release_package_release }}.tgz --wait
    -f /tmp/nauta-platform-{{ nauta_release_package_version }}-{{ nauta_release_package_version_suffix }}-{{ nauta_release_package_release }}.values.yaml

- name: "{{ message_label }} Load informations about admin user"
  environment:
    KUBECONFIG: /etc/nauta-cluster/master/kubernetes/kubeconfigs/admin.kubeconfig
  shell: "kubectl -n kube-system get serviceaccounts nauta-k8s-platform-admin -o jsonpath='{.secrets[0].name}'"
  register: nauta_admin_account

- name: "{{ message_label }} Load informations about admin token"
  environment:
    KUBECONFIG: /etc/nauta-cluster/master/kubernetes/kubeconfigs/admin.kubeconfig
  shell: "kubectl -n kube-system get secrets {{ nauta_admin_account.stdout }} -o jsonpath='{.data.token}'"
  register: nauta_admin_token

- name: "{{ message_label }} Load informations about admin namespace"
  environment:
    KUBECONFIG: /etc/nauta-cluster/master/kubernetes/kubeconfigs/admin.kubeconfig
  shell: "kubectl -n kube-system get secrets {{ nauta_admin_account.stdout }} -o jsonpath='{.data.namespace}'"
  register: nauta_admin_namespace

- name: "{{ message_label }} Load informations about admin crt"
  environment:
    KUBECONFIG: /etc/nauta-cluster/master/kubernetes/kubeconfigs/admin.kubeconfig
  shell: "kubectl -n kube-system get secrets {{ nauta_admin_account.stdout }} -o jsonpath='{.data.ca\\.crt}'"
  register: nauta_admin_crt

- name: "{{ message_label }} Create kubeconfig directory"
  file:
    path: /root/.kube
    state: directory

- name: "{{ message_label }} Render kubeconfig"
  template:
    src: kubeconfig.j2
    dest: /root/.kube/config

- name: "{{ message_label }} Create a k8s nauta namespace"
  changed_when: False
  shell: "kubectl get pods"

- name: "{{ message_label }} Fetch kubeconfig"
  fetch:
    src: "/root/.kube/config"
    dest: "{{ root }}/platform-admin.config"
    flat: True
